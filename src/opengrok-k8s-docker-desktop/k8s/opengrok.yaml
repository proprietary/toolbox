---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: opengrok
  namespace: opengrok
  labels:
    app: opengrok
spec:
  selector:
    matchLabels:
      app: opengrok
  replicas: 1
  minReadySeconds: 15
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 50%
  template:
    metadata:
      labels:
        app: opengrok
    spec:
      containers:
      - name: opengrok
        image: opengrok
        imagePullPolicy: Never
        ports:
        - containerPort: 8080
        - containerPort: 5000
        env:
        - name: CHECK_INDEX
          value: "1"
        - name: SYNC_PERIOD_MINUTES
          value: "240"
        - name: NOMIRROR
          value: "1"
        - name: REST_PORT
          value: "5000"
        - name: API_TIMEOUT
          value: "60"
        - name: READONLY_CONFIG_FILE
          value: /var/opengrok/etc/read-only-config.xml
        volumeMounts:
        - name: opengrok-src
          mountPath: /opengrok/src
        - name: opengrok-data
          mountPath: /opengrok/data
        - name: opengrok-etc
          mountPath: /opengrok/etc
        - name: opengrok-read-only-config
          mountPath: /var/opengrok/etc
          readOnly: true
          subPath: "read-only-config.xml"
        - name: tomcat-server-config
          mountPath: "/usr/local/tomcat/conf/server.xml"
          subPath: "server.xml"
          readOnly: true
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 30
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 30
          successThreshold: 1
          failureThreshold: 3
      volumes:
      - name: opengrok-src
        persistentVolumeClaim:
          claimName: opengrok-src-pvc
      - name: opengrok-data
        persistentVolumeClaim:
          claimName: opengrok-data-pvc
      - name: opengrok-read-only-config
        configMap:
          name: opengrok-config
          items:
          - key: "read-only-config.xml"
            path: "read-only-config.xml"
      - name: tomcat-server-config
        configMap:
          name: opengrok-config
          items:
          - key: "server.xml"
            path: "server.xml"
  volumeClaimTemplates:
  - metadata:
      name: opengrok-etc
      labels:
        app: opengrok
    spec:
      storageClassName: "docker-desktop-dynamic"
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Retain
    whenScaled: Retain
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: opengrok-config
  namespace: opengrok
data:
  read-only-config.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <java version="17.0.10" class="java.beans.XMLDecoder">
      <object class="org.opengrok.indexer.configuration.Configuration">
        <void property="scanningDepth">
          <int>10</int>
        </void>
      </object>
    </java>
  server.xml: |
   <?xml version="1.0" encoding="UTF-8"?>
   <!--
     Licensed to the Apache Software Foundation (ASF) under one or more
     contributor license agreements.  See the NOTICE file distributed with
     this work for additional information regarding copyright ownership.
     The ASF licenses this file to You under the Apache License, Version 2.0
     (the "License"); you may not use this file except in compliance with
     the License.  You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
   -->
   <!-- Note:  A "Server" is not itself a "Container", so you may not
        define subcomponents such as "Disableds" at this level.
        Documentation at /docs/config/server.html
    -->
   <Server port="8005" shutdown="SHUTDOWN">
     <Listener className="org.apache.catalina.startup.VersionLoggerListener" />
     <!-- Security listener. Documentation at /docs/config/listeners.html
     <Listener className="org.apache.catalina.security.SecurityListener" />
     -->
     <!-- APR library loader. Documentation at /docs/apr.html -->
     <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" />
     <!-- Prevent memory leaks due to use of particular java/javax APIs-->
     <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" />
     <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" />
     <Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener" />

     <!-- Global JNDI resources
          Documentation at /docs/jndi-resources-howto.html
     -->
     <GlobalNamingResources>
       <!-- Editable user database that can also be used by
            UserDatabaseRealm to authenticate users
       -->
       <Resource name="UserDatabase" auth="Container"
                 type="org.apache.catalina.UserDatabase"
                 description="User database that can be updated and saved"
                 factory="org.apache.catalina.users.MemoryUserDatabaseFactory"
                 pathname="conf/tomcat-users.xml" />
     </GlobalNamingResources>

     <!-- A "Service" is a collection of one or more "Connectors" that share
          a single "Container" Note:  A "Service" is not itself a "Container",
          so you may not define subcomponents such as "Disableds" at this level.
          Documentation at /docs/config/service.html
      -->
     <Service name="Catalina">

       <!--The connectors can use a shared executor, you can define one or more named thread pools-->
       <!--
       <Executor name="tomcatThreadPool" namePrefix="catalina-exec-"
           maxThreads="150" minSpareThreads="4"/>
       -->


       <!-- A "Connector" represents an endpoint by which requests are received
            and responses are returned. Documentation at :
            HTTP Connector: /docs/config/http.html
            AJP  Connector: /docs/config/ajp.html
            Define a non-SSL/TLS HTTP/1.1 Connector on port 8080
       -->
       <Connector port="8080" protocol="HTTP/1.1"
                  connectionTimeout="20000"
                  redirectPort="8443"
                  maxParameterCount="1000"
                  maxHttpHeaderSize="65536"
                  maxThreads="1024"
                  />
       <!-- A "Connector" using the shared thread pool-->
       <!--
       <Connector executor="tomcatThreadPool"
                  port="8080" protocol="HTTP/1.1"
                  connectionTimeout="20000"
                  redirectPort="8443"
                  maxParameterCount="1000"
                  />
       -->
       <!-- Define an SSL/TLS HTTP/1.1 Connector on port 8443 with HTTP/2
            This connector uses the NIO implementation. The default
            SSLImplementation will depend on the presence of the APR/native
            library and the useOpenSSL attribute of the AprLifecycleListener.
            Either JSSE or OpenSSL style configuration may be used regardless of
            the SSLImplementation selected. JSSE style configuration is used below.
       -->
       <!--
       <Connector port="8443" protocol="org.apache.coyote.http11.Http11NioProtocol"
                  maxThreads="150" SSLEnabled="true"
                  maxParameterCount="1000"
                  >
           <UpgradeProtocol className="org.apache.coyote.http2.Http2Protocol" />
           <SSLHostConfig>
               <Certificate certificateKeystoreFile="conf/localhost-rsa.jks"
                            type="RSA" />
           </SSLHostConfig>
       </Connector>
       -->

       <!-- Define an AJP 1.3 Connector on port 8009 -->
       <!--
       <Connector protocol="AJP/1.3"
                  address="::1"
                  port="8009"
                  redirectPort="8443"
                  maxParameterCount="1000"
                  />
       -->

       <!-- An Engine represents the entry point (within Catalina) that processes
            every request.  The Engine implementation for Tomcat stand alone
            analyzes the HTTP headers included with the request, and passes them
            on to the appropriate Host (virtual host).
            Documentation at /docs/config/engine.html -->

       <!-- You should set jvmRoute to support load-balancing via AJP ie :
       <Engine name="Catalina" defaultHost="localhost" jvmRoute="jvm1">
       -->
       <Engine name="Catalina" defaultHost="localhost">

         <!--For clustering, please take a look at documentation at:
             /docs/cluster-howto.html  (simple how to)
             /docs/config/cluster.html (reference documentation) -->
         <!--
         <Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"/>
         -->

         <!-- Use the LockOutRealm to prevent attempts to guess user passwords
              via a brute-force attack -->
         <Realm className="org.apache.catalina.realm.LockOutRealm">
           <!-- This Realm uses the UserDatabase configured in the global JNDI
                resources under the key "UserDatabase".  Any edits
                that are performed against this UserDatabase are immediately
                available for use by the Realm.  -->
           <Realm className="org.apache.catalina.realm.UserDatabaseRealm"
                  resourceName="UserDatabase"/>
         </Realm>

         <Host name="localhost"  appBase="webapps"
               unpackWARs="true" autoDeploy="true">

           <!-- SingleSignOn valve, share authentication between web applications
                Documentation at: /docs/config/valve.html -->
           <!--
           <Disabled className="org.apache.catalina.authenticator.SingleSignOn" />
           -->

           <!-- Access log processes all example.
                Documentation at: /docs/config/valve.html
                Note: The pattern used is equivalent to using pattern="common" -->
           <Disabled className="org.apache.catalina.valves.AccessLogValve" directory="logs"
                  prefix="localhost_access_log" suffix=".txt"
                  pattern="%h %l %u %t &quot;%r&quot; %s %b" />

         </Host>
       </Engine>
     </Service>
   </Server>
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: docker-desktop-dynamic
  namespace: opengrok
provisioner: docker.io/hostpath
reclaimPolicy: Delete
volumeBindingMode: Immediate
---
